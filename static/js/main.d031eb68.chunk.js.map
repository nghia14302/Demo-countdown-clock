{"version":3,"sources":["components/LoadingScreen/LoadingScreen.jsx","components/Clock/counterTimer/ProgressBar/ProgressBar.jsx","components/Clock/counterTimer/CounterTimer.jsx","components/Clock/Clock.jsx","App.js","reportWebVitals.js","index.js"],"names":["LoadingScreen","react_default","a","createElement","className","CircularProgress","color","ProgressBar","props","cx","cy","r","style","strokeDashoffset","percent","CounterTimer","lastDate","startDate","parseInt","Math","abs","currentDate","counterTimer_ProgressBar_ProgressBar","unit","Clock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","countDownTimer","days","hours","minutes","seconds","_this2","setTime","setInterval","countDown","clearInterval","getTime","setState","floor","Fragment","toDateString","Clock_counterTimer_CounterTimer","getDate","getHours","getMinutes","getSeconds","components_LoadingScreen_LoadingScreen","React","Component","App","components_Clock_Clock","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d031eb68.chunk.js","sourcesContent":["import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport './LoadingScreen.css';\r\nconst LoadingScreen = () => {\r\n    return (\r\n        <div className=\"loading-screen\">\r\n            <h2>Loading...</h2>\r\n            <CircularProgress color=\"secondary\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingScreen;","import React from 'react';\r\nimport './ProgressBar.css';\r\n\r\nconst ProgressBar = (props) => {\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <svg>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\"></circle>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\" style={ {'strokeDashoffset': 440 - (440 * props.percent) / 100 } }> </circle>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport './CounterTimer.css';\r\nimport './CounterTimer.css';\r\nimport ProgressBar from './ProgressBar/ProgressBar.jsx';\r\nconst CounterTimer = (props) => {\r\n    let percent = 0;\r\n    if ((props.lastDate - props.startDate) !== 0){\r\n        percent = parseInt(Math.abs(props.currentDate) / Math.abs(props.lastDate - props.startDate) * 100 );\r\n    }\r\n    return ( \r\n        <div className=\"clock-counter\"> \r\n            <ProgressBar percent={percent} />\r\n            <div className=\"clock-timer\">\r\n                {props.currentDate}\r\n            </div>\r\n            <div className=\"clock-unit\">\r\n                {props.unit}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default CounterTimer;","import React from 'react';\r\nimport CounterTimer from './counterTimer/CounterTimer.jsx';\r\nimport './Clock.css'\r\nimport LoadingScreen from './../LoadingScreen/LoadingScreen.jsx';\r\nimport Delay from 'react-delay';\r\nconst dayToMilisecond = 1000 * 60 * 60 * 24;\r\nconst minuteToMilisecond = 1000 * 60;\r\nconst hourToMilisecond = 1000 * 60 * 60;\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(2021, 4, 18, 0, 0, 0),\r\n            startDate: new Date(2021, 4, 10, 23, 59, 59),\r\n            countDownTimer: new Date(),\r\n            currentDate: new Date(),\r\n            days: 0,\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: -1,\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setTime = setInterval(() => this.countDown(), 1000);\r\n    };\r\n    componentWillUnmount() {\r\n        clearInterval(this.setTime);\r\n    };\r\n    countDown() {\r\n        if (this.state.date.getTime() - this.state.currentDate.getTime() >= 0){\r\n            this.setState({\r\n                countDownTimer: new Date(this.state.date.getTime() - this.state.currentDate.getTime()),\r\n                currentDate: new Date(),\r\n            });\r\n            this.setState({\r\n                days: Math.floor(this.state.countDownTimer.getTime()  / dayToMilisecond),\r\n                hours: Math.floor(this.state.countDownTimer.getTime() / hourToMilisecond % 24),\r\n                minutes: Math.floor(this.state.countDownTimer.getTime() / minuteToMilisecond %  60),\r\n                seconds: Math.floor(this.state.countDownTimer.getTime() / 1000 % 60)\r\n            });\r\n        } else {\r\n            this.setState({\r\n                days: 0,\r\n                hours: 0,\r\n                minutes: 0,\r\n                seconds: 0,\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n        <> \r\n        { this.state.seconds !== -1 ? \r\n            <div className=\"countdown-timer\" >\r\n                <h2>Count Down To Talk Show</h2>\r\n                <h4>The talk shows will begin in {this.state.date.toDateString()} </h4>\r\n                <div className=\"clock-container \" >\r\n                    <CounterTimer \r\n                        currentDate={this.state.days} \r\n                        startDate={this.state.startDate.getDate()} \r\n                        lastDate={this.state.date.getDate()} \r\n                        unit=\"Day\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.hours} \r\n                        startDate={this.state.startDate.getHours()} \r\n                        lastDate={this.state.date.getHours()} \r\n                        unit=\"Hours\"\r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.minutes} \r\n                        startDate={this.state.startDate.getMinutes()} \r\n                        lastDate={this.state.date.getMinutes()} \r\n                        unit=\"Minutes\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.seconds} \r\n                        startDate={this.state.startDate.getSeconds()} \r\n                        lastDate={this.state.date.getSeconds()} \r\n                        unit=\"Seconds\" \r\n                    />\r\n                </div>\r\n            </div> \r\n        :   <LoadingScreen />    \r\n        }\r\n        </>\r\n        );\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default Clock;","import React, { useState, useEffect, Suspense } from 'react';\r\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen.jsx';\r\nimport Clock from './components/Clock/Clock.jsx';\r\nfunction App() {\r\n  return (\r\n      <Clock />\r\n  )\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}