{"version":3,"sources":["components/Clock/counterTimer/ProgressBar/ProgressBar.jsx","components/Clock/counterTimer/CounterTimer.jsx","components/Clock/Clock.jsx","components/LoadingScreen/LoadingScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["ProgressBar","props","react_default","a","createElement","className","cx","cy","r","style","strokeDashoffset","percent","CounterTimer","lastDate","startDate","parseInt","Math","abs","currentDate","counterTimer_ProgressBar_ProgressBar","unit","Clock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","countDownTimer","days","hours","minutes","seconds","_this2","setTime","setInterval","countDown","clearInterval","getTime","setState","floor","console","log","getDate","toDateString","Clock_counterTimer_CounterTimer","getHours","getMinutes","getSeconds","React","Component","LoadingScreen","App","_useState","useState","_useState2","slicedToArray","loading","Fragment","components_Clock_Clock","components_LoadingScreen_LoadingScreen","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e8e5f68e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ProgressBar.css';\r\n\r\nconst ProgressBar = (props) => {\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <svg>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\"></circle>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\" style={ {'strokeDashoffset': 440 - (440 * props.percent) / 100 } }> </circle>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport './CounterTimer.css';\r\nimport './CounterTimer.css';\r\nimport ProgressBar from './ProgressBar/ProgressBar.jsx';\r\nconst CounterTimer = (props) => {\r\n    let percent = 0;\r\n    if ((props.lastDate - props.startDate) !== 0){\r\n        percent = parseInt(Math.abs(props.currentDate) / Math.abs(props.lastDate - props.startDate) * 100 );\r\n    }\r\n    return ( \r\n        <div className=\"clock-counter\"> \r\n            <ProgressBar \r\n                percent={percent}\r\n            />\r\n            <div className=\"clock-timer\">\r\n                {props.currentDate}\r\n            </div>\r\n            <div className=\"clock-unit\">\r\n                {props.unit}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default CounterTimer;","import React from 'react';\r\nimport CounterTimer from './counterTimer/CounterTimer.jsx';\r\nimport './Clock.css'\r\n\r\nconst dayToMilisecond = 1000 * 60 * 60 * 24;\r\nconst minuteToMilisecond = 1000 * 60;\r\nconst hourToMilisecond = 1000 * 60 * 60;\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(2021, 4, 18, 0, 0, 0),\r\n            startDate: new Date(2021, 4, 10, 23, 59, 59),\r\n            countDownTimer: new Date(),\r\n            currentDate: new Date(),\r\n            days: 0,\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0,\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setTime = setInterval(() => this.countDown(), 1000);\r\n    };\r\n    componentWillUnmount() {\r\n        clearInterval(this.setTime);\r\n    };\r\n    countDown() {\r\n        debugger;\r\n        if (this.state.date.getTime() - this.state.currentDate.getTime() >= 0){\r\n            this.setState({\r\n                countDownTimer: new Date(this.state.date.getTime() - this.state.currentDate.getTime()),\r\n                currentDate: new Date(),\r\n            });\r\n            this.setState({\r\n                days: Math.floor(this.state.countDownTimer.getTime()  / dayToMilisecond),\r\n                hours: parseInt(Math.floor(this.state.countDownTimer.getTime() / hourToMilisecond % 24)),\r\n                minutes: parseInt(Math.floor(this.state.countDownTimer.getTime() / minuteToMilisecond %  60)),\r\n                seconds: parseInt(Math.floor(this.state.countDownTimer.getTime() / 1000 % 60))\r\n            });\r\n            console.log(this.state.countDownTimer.getDate());\r\n        } else {\r\n            this.setState({\r\n                days: 0,\r\n                hours: 0,\r\n                minutes: 0,\r\n                seconds: 0,\r\n            });\r\n        };\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"countdown-timer\">\r\n                <h2>Count Down To Talk Show</h2>\r\n                <h4>The talk shows will begin in {this.state.date.toDateString()} </h4>\r\n                <div className=\"clock-container \">\r\n                    <CounterTimer \r\n                        currentDate={this.state.days} \r\n                        startDate={this.state.startDate.getDate()} \r\n                        lastDate={this.state.date.getDate()} \r\n                        unit=\"Day\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.hours} \r\n                        startDate={this.state.startDate.getHours()} \r\n                        lastDate={this.state.date.getHours()} \r\n                        unit=\"Hours\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.minutes} \r\n                        startDate={this.state.startDate.getMinutes()} \r\n                        lastDate={this.state.date.getMinutes()} \r\n                        unit=\"Minutes\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.seconds} \r\n                        startDate={this.state.startDate.getSeconds()} \r\n                        lastDate={this.state.date.getSeconds()} \r\n                        unit=\"Seconds\" \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default Clock;","import React from 'react';\r\n\r\nconst LoadingScreen = () => {\r\n    return (\r\n        <div className=\"loading-screen\">\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingScreen;","import React, { useState, useEffect } from 'react';\r\nimport Clock from './components/Clock/Clock.jsx';\r\nimport LoadingScreen from './components/LoadingScreen/LoadingScreen.jsx';\r\nfunction App() {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  return (\r\n    <>\r\n    {loading === false ? (\r\n        <Clock /> \r\n    ) : (\r\n      <LoadingScreen />\r\n    )}\r\n  </>\r\n  )\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}