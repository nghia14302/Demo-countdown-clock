{"version":3,"sources":["components/Clock/counterTimer/ProgressBar/ProgressBar.jsx","components/Clock/counterTimer/CounterTimer.jsx","components/Clock/Clock.jsx","App.js","reportWebVitals.js","index.js"],"names":["ProgressBar","props","className","cx","cy","r","style","percent","CounterTimer","lastDate","startDate","currentDate","unit","Clock","state","date","Date","countDownTimer","this","setTime","setInterval","countDown","clearInterval","getTime","setState","toLocaleDateString","getDate","getHours","getMinutes","getSeconds","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAceA,EAXK,SAACC,GACjB,OACI,qBAAKC,UAAU,eAAf,SACI,gCACI,wBAAQC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B,wBAAQF,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,MAAQ,CAAC,iBAAoB,IAAO,IAAML,EAAMM,QAAW,KAA1F,qBCeDC,EAnBM,SAACP,GAClB,IAAIM,EAAU,EAId,OAHKN,EAAMQ,SAAWR,EAAMS,YAAe,IACvCH,GAAWN,EAAMU,YAAcV,EAAMS,YAAcT,EAAMQ,SAAWR,EAAMS,WAAa,KAGvF,sBAAKR,UAAU,gBAAf,UACI,cAAC,EAAD,CACIK,QAASA,IAEb,qBAAKL,UAAU,cAAf,SACKD,EAAMU,cAEX,qBAAKT,UAAU,aAAf,SACKD,EAAMW,WC+CRC,G,wDA7DX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDa,MAAQ,CACTC,KAAM,IAAIC,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,GAClCN,UAAW,IAAIM,KAAK,KAAM,EAAG,GAAI,GAAI,GAAI,IACzCL,YAAa,IAAIK,KACjBC,eAAgB,IAAID,MANT,E,qDASnB,WAAqB,IAAD,OAChBE,KAAKC,QAAUC,aAAY,kBAAM,EAAKC,cAAa,O,kCAEvD,WACIC,cAAcJ,KAAKC,W,uBAEvB,WACQD,KAAKJ,MAAMC,KAAKQ,UAAYL,KAAKJ,MAAMH,YAAYY,YAAc,GACjEL,KAAKM,SAAS,CACVP,eAAgB,IAAID,KAAKE,KAAKJ,MAAMC,KAAKQ,UAAYL,KAAKJ,MAAMH,YAAYY,WAC5EZ,YAAa,IAAIK,S,oBAI7B,WACI,OACI,sBAAKd,UAAU,kBAAf,UACI,yDACA,+DAAkCgB,KAAKJ,MAAMC,KAAKU,qBAAlD,OACA,sBAAKvB,UAAU,kBAAf,UACI,cAAC,EAAD,CACIS,YAAaO,KAAKJ,MAAMG,eAAeS,UACvChB,UAAWQ,KAAKJ,MAAMJ,UAAUgB,UAChCjB,SAAUS,KAAKJ,MAAMC,KAAKW,UAC1Bd,KAAK,QAET,cAAC,EAAD,CACID,YAAaO,KAAKJ,MAAMG,eAAeU,WACvCjB,UAAWQ,KAAKJ,MAAMJ,UAAUiB,WAChClB,SAAUS,KAAKJ,MAAMC,KAAKY,WAC1Bf,KAAK,UAET,cAAC,EAAD,CACID,YAAaO,KAAKJ,MAAMG,eAAeW,aACvClB,UAAWQ,KAAKJ,MAAMJ,UAAUkB,aAChCnB,SAAUS,KAAKJ,MAAMC,KAAKa,aAC1BhB,KAAK,YAET,cAAC,EAAD,CACID,YAAaO,KAAKJ,MAAMG,eAAeY,aACvCnB,UAAWQ,KAAKJ,MAAMJ,UAAUmB,aAChCpB,SAAUS,KAAKJ,MAAMC,KAAKc,aAC1BjB,KAAK,sB,GApDTkB,IAAMC,YCKXC,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.260296c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ProgressBar.css';\r\n\r\nconst ProgressBar = (props) => {\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <svg>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\"></circle>\r\n                <circle cx=\"70\" cy=\"70\" r=\"70\" style={ {'strokeDashoffset': 440 - (440 * props.percent) / 100 } }> </circle>\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;","import React from 'react';\r\nimport './CounterTimer.css';\r\nimport './CounterTimer.css';\r\nimport ProgressBar from './ProgressBar/ProgressBar.jsx';\r\nconst CounterTimer = (props) => {\r\n    let percent = 0;\r\n    if ((props.lastDate - props.startDate) !== 0){\r\n        percent = (props.currentDate - props.startDate) / (props.lastDate - props.startDate) * 100;\r\n    }\r\n    return ( \r\n        <div className=\"clock-counter\"> \r\n            <ProgressBar \r\n                percent={percent}\r\n            />\r\n            <div className=\"clock-timer\">\r\n                {props.currentDate}\r\n            </div>\r\n            <div className=\"clock-unit\">\r\n                {props.unit}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default CounterTimer;","import React from 'react';\r\nimport CounterTimer from './counterTimer/CounterTimer.jsx';\r\nimport './Clock.css'\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(2021, 4, 15, 0, 0, 0),\r\n            startDate: new Date(2021, 4, 10, 23, 59, 59),\r\n            currentDate: new Date(),\r\n            countDownTimer: new Date(),\r\n        };\r\n    };\r\n    componentDidMount() {\r\n        this.setTime = setInterval(() => this.countDown(), 1000);\r\n    };\r\n    componentWillUnmount() {\r\n        clearInterval(this.setTime);\r\n    };\r\n    countDown() {\r\n        if (this.state.date.getTime() - this.state.currentDate.getTime() !== 0){\r\n            this.setState({\r\n                countDownTimer: new Date(this.state.date.getTime() - this.state.currentDate.getTime()),\r\n                currentDate: new Date(),\r\n            });\r\n        };\r\n    };\r\n    render() {\r\n        return (\r\n            <div className=\"countdown-timer\">\r\n                <h2>Count Down To Talk Show</h2>\r\n                <h4>The talk shows will begin in {this.state.date.toLocaleDateString()} </h4>\r\n                <div className=\"clock-container\">\r\n                    <CounterTimer \r\n                        currentDate={this.state.countDownTimer.getDate()} \r\n                        startDate={this.state.startDate.getDate()} \r\n                        lastDate={this.state.date.getDate()} \r\n                        unit=\"Day\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.countDownTimer.getHours()} \r\n                        startDate={this.state.startDate.getHours()} \r\n                        lastDate={this.state.date.getHours()} \r\n                        unit=\"Hours\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.countDownTimer.getMinutes()} \r\n                        startDate={this.state.startDate.getMinutes()} \r\n                        lastDate={this.state.date.getMinutes()} \r\n                        unit=\"Minutes\" \r\n                    />\r\n                    <CounterTimer \r\n                        currentDate={this.state.countDownTimer.getSeconds()} \r\n                        startDate={this.state.startDate.getSeconds()} \r\n                        lastDate={this.state.date.getSeconds()} \r\n                        unit=\"Seconds\" \r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default Clock;","import Clock from './components/Clock/Clock.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <Clock />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}